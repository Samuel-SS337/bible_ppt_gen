# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_windows.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# from PyQt5 import QtCore,  QtWidgets
# from PyQt5.QtGui import *

from PyQt5 import QtCore,  QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import requests
from bs4 import BeautifulSoup
from pptx import Presentation
from pptx.util import Pt
from pptx.enum.text import PP_ALIGN, MSO_AUTO_SIZE
import copy
import os
import copy

# DIR_PATH = os.path.dirname(os.path.abspath(__file__))
DIR_PATH = os.getcwd()

def SlideCopyFromPasteInto(copyFromPres, slideIndex,  pasteIntoPres, book, chapter, sec, sentence):
    slide_to_copy = copyFromPres.slides[slideIndex]
    slide_layout = pasteIntoPres.slide_layouts[copyFromPres.slide_layouts.index(slide_to_copy.slide_layout)]
    new_slide = pasteIntoPres.slides.add_slide(slide_layout)
    imgDict = {}
    for shp in slide_to_copy.shapes:
        if 'Picture' in shp.name:
            with open(shp.name+'.jpg', 'wb') as f:
                f.write(shp.image.blob)
            imgDict[shp.name+'.jpg'] = [shp.left, shp.top, shp.width, shp.height]
        else:
            el = shp.element
            newel = copy.deepcopy(el)
            new_slide.shapes._spTree.insert_element_before(newel, 'p:extLst')
    
    for k, v in imgDict.items():
        new_slide.shapes.add_picture(k, v[0], v[1], v[2], v[3])
        os.remove(k)

    for shape in new_slide.shapes:
        if not(shape.has_text_frame): continue

        font = shape.text_frame.paragraphs[0].font
        
        if shape.text_frame.text == "book": 
            shape.text_frame.paragraphs[0].runs[0].text = f"{book} {chapter}"

        if shape.text_frame.text.lstrip() == "verses":
            shape.text_frame.paragraphs[0].runs[0].text = f"{sec} {sentence}"
        
        # shape.text_frame.paragraphs[0].font.bold = True
        # shape.text_frame.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
        # shape.text_frame.autofit_text()
    return new_slide


class Ui_MainWindow(object):
    books = []
    versions = []
    baseUrl = "http://bible.godpia.com/read/reading.asp"
    def __init__(self):
        self.versions.append({'key':'gae', 'name':'개역개정 4판'})
        self.versions.append({'key':'niv', 'name':'NIV'})
        self.versions.append({'key':'han', 'name':'개역한글'})
        self.versions.append({'key':'easy', 'name':'쉬운성경'})
        self.versions.append({'key':'cognew', 'name':'공동번역'})
        self.versions.append({'key':'hyun', 'name':'현대인의성경'})
        self.versions.append({'key':'saenew', 'name':'새번역'})
        self.versions.append({'key':'hebrew', 'name':'히브리어(구약)'})
        self.versions.append({'key':'greek', 'name':'헬라어(신약)'})
    

        self.books.append({'name':'창세기','key':'gen'})
        self.books.append({'name':'출애굽기','key':'exo'})
        self.books.append({'name':'레위기','key':'lev'})
        self.books.append({'name':'민수기','key':'num'})
        self.books.append({'name':'신명기','key':'deu'})
        self.books.append({'name':'여호수아','key':'jos'})
        self.books.append({'name':'사사기','key':'jdg'})
        self.books.append({'name':'룻기','key':'rut'})
        self.books.append({'name':'사무엘상','key':'1sa'})
        self.books.append({'name':'사무엘하','key':'2sa'})
        self.books.append({'name':'열왕기상','key':'1ki'})
        self.books.append({'name':'열왕기하','key':'2ki'})
        self.books.append({'name':'역대상','key':'1ch'})
        self.books.append({'name':'역대하','key':'2ch'})
        self.books.append({'name':'에스라','key':'ezr'})
        self.books.append({'name':'느헤미야','key':'neh'})
        self.books.append({'name':'에스더','key':'est'})
        self.books.append({'name':'욥기','key':'job'})
        self.books.append({'name':'시편','key':'psa'})
        self.books.append({'name':'잠언','key':'pro'})
        self.books.append({'name':'전도서','key':'ecc'})
        self.books.append({'name':'아가','key':'sng'})
        self.books.append({'name':'이사야','key':'isa'})
        self.books.append({'name':'예레미야','key':'jer'})
        self.books.append({'name':'예레미야애가','key':'lam'})
        self.books.append({'name':'에스겔','key':'ezk'})
        self.books.append({'name':'다니엘','key':'dan'})
        self.books.append({'name':'호세아','key':'hos'})
        self.books.append({'name':'요엘','key':'jol'})
        self.books.append({'name':'아모스','key':'amo'})
        self.books.append({'name':'오바댜','key':'oba'})
        self.books.append({'name':'요나','key':'jnh'})
        self.books.append({'name':'미가','key':'mic'})
        self.books.append({'name':'나훔','key':'nam'})
        self.books.append({'name':'하박국','key':'hab'})
        self.books.append({'name':'스바냐','key':'zep'})
        self.books.append({'name':'학개','key':'hag'})
        self.books.append({'name':'스가랴','key':'zec'})
        self.books.append({'name':'말라기','key':'mal'})
        self.books.append({'name':'마태복음', 'key':'mat'})
        self.books.append({'name':'마가복음', 'key':'mrk'})
        self.books.append({'name':'누가복음', 'key':'luk'})
        self.books.append({'name':'요한복음', 'key':'jhn'})
        self.books.append({'name':'사도행전', 'key':'act'})
        self.books.append({'name':'로마서', 'key':'rom'})
        self.books.append({'name':'고린도전서', 'key':'1co'})
        self.books.append({'name':'고린도후서', 'key':'2co'})
        self.books.append({'name':'갈라디아서', 'key':'gal'})
        self.books.append({'name':'에베소서', 'key':'eph'})
        self.books.append({'name':'빌립보서', 'key':'php'})
        self.books.append({'name':'골로새서', 'key':'col'})
        self.books.append({'name':'데살로니가전서', 'key':'1th'})
        self.books.append({'name':'데살로니가후서', 'key':'2th'})
        self.books.append({'name':'디모데전서', 'key':'1ti'})
        self.books.append({'name':'디모데후서', 'key':'2ti'})
        self.books.append({'name':'디도서', 'key':'tit'})
        self.books.append({'name':'빌레몬서', 'key':'phm'})
        self.books.append({'name':'히브리서', 'key':'heb'})
        self.books.append({'name':'야고보서', 'key':'jas'})
        self.books.append({'name':'베드로전서', 'key':'1pe'})
        self.books.append({'name':'베드로후서', 'key':'2pe'})
        self.books.append({'name':'요한1서', 'key':'1jn'})
        self.books.append({'name':'요한2서', 'key':'2jn'})
        self.books.append({'name':'요한3서', 'key':'3jn'})
        self.books.append({'name':'유다서', 'key':'jud'})
        self.books.append({'name':'요한계시록', 'key':'rev'})
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(357, 237)
        MainWindow.setMinimumSize(QtCore.QSize(357, 237))
        MainWindow.setMaximumSize(QtCore.QSize(357, 237))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.combo_book = QtWidgets.QComboBox(self.centralwidget)
        self.combo_book.setGeometry(QtCore.QRect(40, 70, 251, 26))
        self.combo_book.setObjectName("combo_book")
        for book in self.books:
            self.combo_book.addItem(book['name'])
        self.combo_book.setEditable(True)
        self.combo_book.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        self.combo_book.completer().setCompletionMode(QtWidgets.QCompleter.PopupCompletion)
        self.inputChapter = QtWidgets.QLineEdit(self.centralwidget)
        self.inputChapter.setGeometry(QtCore.QRect(40, 110, 81, 21))
        self.inputChapter.setObjectName("inputChapter")
        self.inputChapter.setValidator(QIntValidator(1,200))
        self.inputChapter.setText('1')
        self.inputVerses = QtWidgets.QLineEdit(self.centralwidget)
        self.inputVerses.setGeometry(QtCore.QRect(40, 150, 81, 21))
        self.inputVerses.setObjectName("inputVerses")
        self.inputVerses.setValidator(QIntValidator(1,300))
        self.inputVerses.setText('1')
        self.combo_version = QtWidgets.QComboBox(self.centralwidget)
        self.combo_version.setGeometry(QtCore.QRect(40, 30, 251, 26))
        self.combo_version.setObjectName("combo_version")
        for version in self.versions:
            self.combo_version.addItem(version['name'])
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(130, 110, 60, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 150, 60, 16))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(210, 140, 113, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.run_proc)
        self.inputVersesEnd = QtWidgets.QLineEdit(self.centralwidget)
        self.inputVersesEnd.setGeometry(QtCore.QRect(40, 180, 81, 21))
        self.inputVersesEnd.setObjectName("inputVersesEnd")
        self.inputVersesEnd.setValidator(QIntValidator(1,300))
        self.inputVersesEnd.setText('1')
        self.inputVersesEnd.setEnabled(False)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 180, 60, 16))
        self.label_3.setObjectName("label_3")
        self.cbAllVerses = QtWidgets.QCheckBox(self.centralwidget)
        self.cbAllVerses.setGeometry(QtCore.QRect(210, 110, 96, 20))
        self.cbAllVerses.setObjectName("cbAllVerses")
        self.cbAllVerses.setChecked(True)
        self.cbAllVerses.clicked.connect(self.change_endVerses)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "VERSES PPT Generator"))
        self.label.setText(_translate("MainWindow", "장"))
        self.label_2.setText(_translate("MainWindow", "절 부터"))
        self.pushButton.setText(_translate("MainWindow", "생성하기"))
        self.label_3.setText(_translate("MainWindow", "절 까지"))
        self.cbAllVerses.setText(_translate("MainWindow", "마지막 절까지"))
    
    def change_endVerses(self):
        self.inputVersesEnd.setEnabled(not self.cbAllVerses.isChecked())
    
    def run_proc(self):
        # QMessageBox.about(self.centralwidget, "message", "clicked")
        book = self.combo_book.currentText()
        version = self.combo_version.currentText()
        chapter = self.inputChapter.text()
        try:
            startVerses = int(self.inputVerses.text())
            endVerses = int(self.inputVersesEnd.text())
        except:
            QMessageBox.about(self, "절 정보에 문제가 있습니다.", "clicked")
            return
        version_key = self.find_version_key(version)
        book_key = self.find_book_key(book)
        
        _url = f"{self.baseUrl}?ver={version_key}&ver2=&vol={book_key}&chap={chapter}&sec="
        response = requests.get(_url)
        
        if response.status_code == 200 :
            scripts = []
            soup = BeautifulSoup(response.text, 'html.parser')
            spans = soup.find_all('span', 'txt')
            for txt in spans:
                sec = txt.find('span', 'num').text
                # print(sec, txt.text.replace(sec, ''))
                scripts.insert(int(sec), txt.text.replace(sec, ''))

            templatePres = Presentation(f"{DIR_PATH}/bible.pptx")
            outputPres = Presentation(f"{DIR_PATH}/bible.pptx")
            # delete all slides of new presentation
            for i in range(len(outputPres.slides)-1, -1, -1): 
                rId = outputPres.slides._sldIdLst[i].rId
                outputPres.part.drop_rel(rId)
                del outputPres.slides._sldIdLst[i]
            
            if len(scripts) == 0 :
                QMessageBox.about(self.MainWindow,'ERROR', '장과 절을 확인해 보세요.')
                return

            # copy slide from template to output
            if startVerses > len(scripts) :
                QMessageBox.about(self.MainWindow,'ERROR', '시작절이 너무 큽니다.')
                return
            
            idx = startVerses
            if self.cbAllVerses.isChecked() :
                endVerses = len(scripts) + 1

            if startVerses > endVerses :
                QMessageBox.about(self.MainWindow,'ERROR', '시작절이 종료절보다 큰 값이면 안됩니다.')
                return

            while idx <= endVerses:
                if idx > len(scripts) :
                    break
                SlideCopyFromPasteInto(templatePres, 0, outputPres, book, chapter, idx, scripts[idx-1])
                idx += 1
            saving_cnt = 0
            while True:
                output_filename = f'{book}_{chapter}_{saving_cnt}.pptx'
                try:
                    # outputPres.save(f'{DIR_PATH}/{output_filename}')
                    outputPres.save(os.path.join(DIR_PATH, output_filename))
                    break
                except:
                    saving_cnt += 1
        else :
            QMessageBox.about(self.centralwidget, "통신에 오류가 발생했습니다.", "clicked")
    
    def find_version_key(self, name):
        for value in self.versions:
            if value['name'] == name:
                return value['key']
        return None
    
    def find_book_key(self, name):
        for value in self.books:
            if value['name'] == name:
                return value['key']
        return None


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
